name: domi-server deploy
# 触发workflow的条件
on:
  workflow_dispatch:

env:
    SERVER_PRIVATE_KEY: ${{ secrets.GCD_PRIVATE_KEY }} # 服务器私钥
    SERVER_HOST: ${{ secrets.GCD_HOST }} # 服务器IP地址
    USER_NAME: ${{ secrets.GCD_USER }} # 服务器用户名
    cache-name: domi-server
    ASSEMBLYAI_API_KEY: ${{ secrets.ASSEMBLYAI_API_KEY }}
    STT_AK: ${{ secrets.STT_AK }}
    STT_APPID: ${{ secrets.STT_APPID }}
    STT_CLUSTER: ${{ secrets.STT_CLUSTER }}
    DEPLOY_DIR: ~/code

# jobs表示执行的一项或多项任务
jobs:
    build: # 任务的job_id，具体名称自定义，这里build代表打包
        runs-on: ubuntu-latest # runs-on字段指定运行所需要的虚拟机环境。注意：这个是必填字段
        steps:
            - uses: actions/checkout@main
            
            - name: Remove node_modules
              run: rm -rf node_modules
            
            - name: Get short SHA
              id: short-sha
              run: echo "short_sha=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT
            
            - name: Create .env file
              run: |
                echo "APP_VERSION=${{ steps.short-sha.outputs.short_sha }}" > .env
                echo "ASSEMBLYAI_API_KEY=${{ env.ASSEMBLYAI_API_KEY }}" >> .env
                echo "STT_AK=${{ env.STT_AK }}" >> .env
                echo "STT_APPID=${{ env.STT_APPID }}" >> .env
                echo "STT_CLUSTER=${{ env.STT_CLUSTER }}" >> .env
            
            # 上传打仓库
            - name: Deploy
              uses: easingthemes/ssh-deploy@main
              env:
                  SSH_PRIVATE_KEY: ${{ env.SERVER_PRIVATE_KEY }}
                  ARGS: '-avz --delete'
                  REMOTE_HOST: ${{ env.SERVER_HOST }}
                  REMOTE_USER: ${{ env.USER_NAME }}
                  EXCLUDE: .git
                  SCRIPT_BEFORE: cd ${{ env.DEPLOY_DIR }} && mkdir -p ${{ env.DEPLOY_DIR }}/domi-server-${{ steps.short-sha.outputs.short_sha }} && mkdir -p ${{ env.DEPLOY_DIR }}/logs
                  TARGET: ${{ env.DEPLOY_DIR }}/domi-server-${{ steps.short-sha.outputs.short_sha }} # 服务器目标路径
                  SCRIPT_AFTER: |
                    cd ${{ env.DEPLOY_DIR }}/domi-server-${{ steps.short-sha.outputs.short_sha }}
                    pnpm i
                    pnpm build
                    cd ${{ env.DEPLOY_DIR }}
                    rm -f ${{ env.DEPLOY_DIR }}/domi-server-current
                    ln -s ${{ env.DEPLOY_DIR }}/domi-server-${{ steps.short-sha.outputs.short_sha }} ${{ env.DEPLOY_DIR }}/domi-server-current
                    # 加载环境变量到当前shell
                    set -a && source ${{ env.DEPLOY_DIR }}/domi-server-${{ steps.short-sha.outputs.short_sha }}/.env && set +a
                    export DEPLOY_DIR=${{ env.DEPLOY_DIR }}
                    pm2 restart ${{ env.DEPLOY_DIR }}/domi-server-${{ steps.short-sha.outputs.short_sha }}/ecosystem.config.js --env production
                    echo "$(date '+%Y-%m-%d %H:%M:%S'),${{ steps.short-sha.outputs.short_sha }},domi-server-${{ steps.short-sha.outputs.short_sha }},SUCCESS" >> ${{ env.DEPLOY_DIR }}/deploy_log.csv
                    if [ -f ${{ env.DEPLOY_DIR }}/deploy_log.csv ]; then
                      total_lines=$(wc -l < ${{ env.DEPLOY_DIR }}/deploy_log.csv)
                      if [ $total_lines -gt 3 ]; then
                        lines_to_remove=$((total_lines - 3))
                        head -n $lines_to_remove ${{ env.DEPLOY_DIR }}/deploy_log.csv | cut -d',' -f3 | while read old_version; do
                          if [ -d "${{ env.DEPLOY_DIR }}/$old_version" ] && [ "$old_version" != "domi-server-${{ steps.short-sha.outputs.short_sha }}" ]; then
                            rm -rf "${{ env.DEPLOY_DIR }}/$old_version"
                            echo "Removed old version: $old_version"
                          fi
                        done
                      fi
                    fi