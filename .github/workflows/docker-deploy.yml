name: Docker CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: 安装pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        
    - name: 安装依赖
      run: pnpm install
      
    - name: 代码格式检查
      run: pnpm run lint
      
    - name: 运行测试
      run: pnpm run test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 登录到容器注册表
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          
    - name: 构建并推送Docker镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 部署到服务器
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          # 登录到GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # 停止并移除现有容器
          docker stop ttc-be || true
          docker rm ttc-be || true
          
          # 拉取最新镜像
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
          
          # 运行新容器
          docker run -d \
            --name ttc-be \
            --restart unless-stopped \
            -p 3000:3000 \
            -e NODE_ENV=production \
            -v /var/www/ttc-be/.env:/app/.env \
            -v /var/www/ttc-be/audio:/app/audio \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
          
          # 清理未使用的镜像
          docker image prune -f
          
          # 检查容器状态
          sleep 10
          docker ps | grep ttc-be 